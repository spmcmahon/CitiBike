import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport seaborn as sns # just a few sample months to look at NY062013 = pd.read_csv('201306-citibike-tripdata.csv')NY032017 = pd.read_csv('201703-citibike-tripdata.csv')NY062021 = pd.read_csv('202106-citibike-tripdata.csv')NY122021 = pd.read_csv('202112-citibike-tripdata.csv')NY042019 = pd.read_csv('201904-citibike-tripdata.csv')# nyc0613.to_parquet('nyc0613.parquet')def Col_rename(df):    for i in list(df.columns):        if i in ['starttime','started_at','Start Time']:            df.rename({i:'start_time'}, axis=1, inplace = True)        if i in ['member_casual','User Type','usertype']:            df.rename({i: 'user_type'}, axis =1, inplace = True)        if i in ['tripduration' , 'Trip Duration']:            df.rename({i: 'duration'}, axis =1, inplace = True)        if i in ['stoptime'  , 'Stop Time'  ,'ended_at']:            df.rename({i: 'end_time'}, axis =1, inplace = True)        if i in ['start station id',  'Start Station ID' ]:            df.rename({i: 'start_station_id'}, axis =1, inplace = True)        if i in ['start station name' , 'Start Station Name' ]:            df.rename({i: 'start_station_name'}, axis =1, inplace = True)        if i in ['start station latitude' , 'Start Station Latitude' ]:            df.rename({i: 'start_lat'}, axis =1, inplace = True)        if i in ['start station longitude', 'Start Station Longitude' ]:            df.rename({i: 'start_lng'}, axis =1, inplace = True)        if i in ['end station id' , 'End Station ID' ]:            df.rename({i: 'end_station_id'}, axis =1, inplace = True)        if i in ['end station name' ,'End Station Name']:            df.rename({i: 'end_station_name'}, axis =1, inplace = True)        if i in ['end station latitude'  ,'End Station Latitude']:            df.rename({i: 'end_lat'}, axis =1, inplace = True)        if i in ['end station longitude', 'End Station Longitude']:            df.rename({i: 'end_lng'}, axis =1, inplace = True)            def Col_to_dt(df):    df[["start_time", "end_time"]] = df[["start_time", "end_time"]].apply(pd.to_datetime)def Col_duration(df):    if 'duration' in list(df.columns):        df['duration'] = df['duration'].astype(float)    else:         df['duration'] = (df["end_time"] - df["start_time"]).astype('timedelta64[s]')        def Statid_to_string(df):    df['start_station_id'] = df['start_station_id' ].astype(str)    df['end_station_id'] = df['end_station_id'].astype(str)        def Drop_cols(df):    cols_to_drop = ['birth year','Birth Year',                     'gender', 'Gender',                    'bikeid','Bike ID',                    'ride_id','rideable_type']        df = df.drop(cols_to_drop, axis=1, errors='ignore')       # reorder column: make an if statement to check if order is already correct?             def Col_reorder(df):    df = df.reindex(['start_time','end_time','duration','start_station_name','start_station_id',                     'end_station_name','end_station_id',                     'start_lat','start_lng', 'end_lat','end_lng', 'user_type'], axis=1)         def clean_df(file):     # read in the csv     df = pd.read_csv(file)        # make columms uniform     Col_rename(df)    Col_to_dt(df)    Col_duration(df)    Statid_to_string(df)    Drop_cols(df)    Col_reorder(df)    return df# seperate function to add new feature columns to otherwise clean dfdef new_features(df):     pass     #return df         def make_year(folder):    year_df = pd.DataFrame()    for file in folder:         temp = clean_df(file)        #new_features(temp)                #concat temp with other months        pd.concat([year_df, temp], axis = 0, ignore_index=True)                # could also save as parquet here ??                # could also split and return random subset here        return year_df 