import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport seaborn as sns import featherimport os# just a few sample months to look at #NY062013 = pd.read_csv('201306-citibike-tripdata.csv')#NY092017 = pd.read_csv('201709-citibike-tripdata.csv')#NY062021 = pd.read_csv('202106-citibike-tripdata.csv')#NY122021 = pd.read_csv('202112-citibike-tripdata.csv')#NY042019 = pd.read_csv('201904-citibike-tripdata.csv')def Col_rename(df):    for i in list(df.columns):        if i in ['starttime','started_at','Start Time']:            df.rename({i:'start_time'}, axis=1, inplace = True)        if i in ['member_casual','User Type','usertype']:            df.rename({i: 'user_type'}, axis =1, inplace = True)        if i in ['tripduration' , 'Trip Duration']:            df.rename({i: 'duration'}, axis =1, inplace = True)        if i in ['stoptime'  , 'Stop Time'  ,'ended_at']:            df.rename({i: 'end_time'}, axis =1, inplace = True)        if i in ['start station id',  'Start Station ID' ]:            df.rename({i: 'start_station_id'}, axis =1, inplace = True)        if i in ['start station name' , 'Start Station Name' ]:            df.rename({i: 'start_station_name'}, axis =1, inplace = True)        if i in ['start station latitude' , 'Start Station Latitude' ]:            df.rename({i: 'start_lat'}, axis =1, inplace = True)        if i in ['start station longitude', 'Start Station Longitude' ]:            df.rename({i: 'start_lng'}, axis =1, inplace = True)        if i in ['end station id' , 'End Station ID' ]:            df.rename({i: 'end_station_id'}, axis =1, inplace = True)        if i in ['end station name' ,'End Station Name']:            df.rename({i: 'end_station_name'}, axis =1, inplace = True)        if i in ['end station latitude'  ,'End Station Latitude']:            df.rename({i: 'end_lat'}, axis =1, inplace = True)        if i in ['end station longitude', 'End Station Longitude']:            df.rename({i: 'end_lng'}, axis =1, inplace = True)            def Col_to_dt(df):    df[["start_time", "end_time"]] = df[["start_time", "end_time"]].apply(pd.to_datetime)def Col_duration(df):    if 'duration' in list(df.columns):        df['duration'] = df['duration'].astype(float)    else:         df['duration'] = (df["end_time"] - df["start_time"]).astype('timedelta64[s]')        def Statid_to_string(df):    df['start_station_id'] = df['start_station_id'].astype(str)    df['end_station_id'] = df['end_station_id'].astype(str)    def User_binary(df):     user_dict = {'member': 1, 'casual': 0,                  'Subscriber': 1, 'Customer': 0,                  'subscriber': 1, 'customer': 0}    df['user_type'] = df['user_type'].map(user_dict)    df['user_type'].fillna(0, inplace=True)               # reorder column: make an if statement to check if order is already correct?             def Col_reorder(df):        df = df[['start_time','end_time','duration',             'start_station_name','start_station_id',             'end_station_name','end_station_id',             'start_lat','start_lng', 'end_lat','end_lng', 'user_type']]    return df    # drop rows with missing end station   def Drop_ends(df):    pass      def clean_df(file):     # read in the csv     df = pd.read_csv(file, encoding='latin-1')        # make columms uniform     Col_rename(df)    Col_to_dt(df)    Col_duration(df)    Statid_to_string(df)    User_binary(df)    df= Col_reorder(df)    return df# seperate function to add new feature columns to otherwise clean dfdef new_features(df):     pass     #return df     #weekday/weekend binary column     def make_year(folder, filename):    #set working dir    year_df = pd.DataFrame(columns = ['start_time','end_time','duration','start_station_name','start_station_id',                     'end_station_name','end_station_id',                     'start_lat','start_lng', 'end_lat','end_lng', 'user_type'])    for file in os.listdir(folder):         if '.csv' not in file:            continue        temp = clean_df(file)        print('Cleaned file: ' + file)               #new_features(temp)                #concat temp with other months        year_df = pd.concat([year_df, temp], axis = 0, ignore_index=True)        print(year_df.shape)               # could also split and return random subset here?             feather.write_dataframe(year_df, filename)    return year_df          # make_year('/Users/mcmahon/Repos/CitiBike/Stephanie/Data Files/NewYork/NY2017', 'NY2017.feather')    #NY17 = feather.read_dataframe('NY2017.feather')