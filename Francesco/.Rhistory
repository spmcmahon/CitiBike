}
AP.arima = arima(x=AP.log, order = c(1,1,1))
AP.predict = forecast(AP.arima, h=12, level=80)
autoplot(AP.predict)
plot.ts(diff(AP.log[1:48]))
# in order to difference seasonally, we use the second argument of the diff function.
AP.log.seasonaldiff = diff(diff(AP.log), 12)
# in order to difference seasonally, we use the second argument of the diff function.
AP.log.seasonaldiff = diff(diff(AP.log), 12)
plot.ts(AP.log.seasonaldiff[1:48])
plot.ts(AP.log.diff)
AP.log.seasonal.diff = diff(AP.log.diff, 12)
plot.ts(AP.log.seasonal.diff)
Box.test(AP.log.seasonal.diff, lag = log(length(AP.log.seasonal.diff)))
acf2(AP.log.seasonal.diff)
acf(AP.log.seasonal.diff)
acf2(AP.log.seasonal.diff)
d = 1
DD = 1
per = 12
for(p in 1:2){
for(q in 1:2){
for(p_seasonal in 1:2){
for(q_seasonal in 1:2){
if(p+d+q+p_seasonal+DD+q_seasonal<=11){
model<-arima(x=AP.log, order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1,p_seasonal-1,DD,q_seasonal-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
AP.sarima = arima(x=AP.log, order = c(0,1,1), seasonal = list(order = c(0,1,1), period = per))
AP.predict = forecast(AP.sarima, h=24, level = 80)
autoplot(AP.predict)
?nottem
plot.ts(nottem)
plot.ts(nottem.log[1:48])
nottem.log = log(nottem)
plot.ts(nottem.log[1:48])
plot.ts(diff(nottem.log, 12))
plot.ts(diff(diff(log(nottem)), 12))
Box.test(diff(diff(log(nottem),12)), lag = log(length(diff(diff(nottem.log,12)))))
nottem.dd.log = diff(diff(nottem.log, 12))
acf2(nottem.dd.log)
d=1
DD=1
per=12
for(p in 1:4){
for(q in 1:2){
for(i in 1:4){
for(j in 1:4){
if(p+d+q+i+DD+j<=15){
model<-arima(x=nottem.log, order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),DD,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1,i-1,DD,j-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
nottem.sarima = arima(x=nottem.log, order = c(1,1,1), seasonal = list(order = c(0,1,3), per = 12))
nottem.predict = forecast(nottem.sarima, h=12, level = 80)
autoplot(nottem.predict)
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
library(forecast)
library(astsa)
# run these lines if you do not have devtools or tsdl installed.
# install.packages("devtools")
# devtools::install_github("FinYang/tsdl")
library(tsdl)
complete_df = read.csv("./data.csv")
set.seed(444)
library(datasets)
library(forecast)
library(astsa)
# run these lines if you do not have devtools or tsdl installed.
# install.packages("devtools")
# devtools::install_github("FinYang/tsdl")
library(tsdl)
complete_df = read.csv("./data.csv")
set.seed(444)
View(complete_df)
plot.ts(complete_df[,2], main = "Time Series 1")
plot.ts(complete_df[,1], main = "Time Series 2")
plot.ts(complete_df[,5], main = "Time Series 3")
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
library(forecast)
library(astsa)
# install.packages("devtools")
# devtools::install_github("FinYang/tsdl")
library(tsdl)
set.seed(444)
lunch_prices = rnorm(100, -10, 5)
starting_bank_account = 400
bank_account_balance = c(starting_bank_account)
for (i in 2:100) {
# x_i = x_{i - 1} + z_i
bank_account_balance[i] = bank_account_balance[i-1] + lunch_prices[i-1]
}
bank_account.ts = ts(bank_account_balance)
plot.ts(bank_account.ts, main = "Time Series of Lunch Spending", ylab = "Bank Account Balance", xlab = "Days")
plot.ts(jj, main = "Johnson and Johnson Quarterly Earnings Per Share", ylab = "Price, USD", xlab="Year")
windspeed.ts = ts(airquality[,'Wind'])
plot.ts(windspeed.ts, main = "Wind Speed in New York, Daily Measurement May to July 1973", ylab='Knots', xlab = "Days")
wn = rnorm(1000)
wn.ts = ts(wn)
plot.ts(wn.ts, main="White Noise Time Series")
z = rnorm(1000)
rw = c(0)
for (i in 2:1000) {
rw[i] = rw[i-1] + z[i]
}
rw.ts = ts(rw)
plot.ts(rw.ts, main="Random Walk Time Series")
w = rnorm(1000)
w2 = rnorm(1000)
w3 = rnorm(1000)
w4 = rnorm(1000)
plot.ts(w, main = "Four White Noises", ylab = "Position")
lines(w2, col='red')
lines(w3, col='green')
lines(w4, col='blue')
rw2 = c(0)
rw3 = c(0)
rw4 = c(0)
for (i in 2:1000) {
rw[i] = rw[i-1] + w[i]
rw2[i] = rw2[i-1] + w2[i]
rw3[i] = rw3[i-1] + w3[i]
rw4[i] = rw4[i-1] + w4[i]
}
plot.ts(rw, ylim=c(-15,60), main = "Four Random Walks", ylab = "Position")
lines(rw2, col='red')
lines(rw3, col='green')
lines(rw4, col='blue')
rw.ts = ts(rw)
acf(rw.ts, type = "covariance", main = "Autocovariance Plot of Random Walk")
acf(w, type="covariance", main = "Autocovariance Plot of White Noise")
acf(rw.ts, type = "correlation", main = "Autocorrelation Plot of Random Walk")
acf(w, type = "correlation", main = "Autocorrelation Plot of White Noise")
acf(wn.ts, type = "covariance", main = "Autocovariance Function Plot of White Noise TS")
acf(rw.ts, type = "covariance", main = "Autocovariance Function Plot of Random Walk TS")
acf(wn.ts, type = "correlation", main = "Autocovariance Function Plot of White Noise TS")
acf(rw.ts, type = "correlation", main = "Autocovariance Function Plot of Random Walk TS")
z = rnorm(1000)
ma3.ts = c(0)
theta = c(0.7, 0.4, 0.1)
for (i in 4:1000) {
ma3.ts[i-3] = z[i] + theta[1]*z[i-1] + theta[2]*z[i-2] + theta[3]*z[i-3]
}
plot.ts(ma3.ts, main="Moving Average 3 Model", ylab="Position")
acf(ma3.ts, type = "correlation", main = "MA(3) ACF plot")
z = rnorm(1000)
ma2.ts = c(0)
theta = c(0.6, -0.3)
for (i in 3:1000) {
ma2.ts[i-2] = z[i] + theta[1] * z[i-1] + theta[2] * z[i-2]
}
plot.ts(ma2.ts, main="MA(2) Model", ylab="Position")
acf(ma2.ts, main = "MA(2) ACF Plot")
# generate your random samples
z = rnorm(1000)
# initiate the ts vector
ma4.ts = c(0)
# assign thetas
theta = c(0.9, 0.5, 0.3, 0.2)
# loop the formula
for (i in 5:1000) {
ma4.ts[i-4] = z[i] + theta[1] * z[i-1] + theta[2] * z[i-2] + theta[3] * z[i-3] + theta[4] * z[i-4]
}
# plot the TS and the ACF
plot.ts(ma4.ts)
acf(ma4.ts)
df_diff1 <- diff(complete_df[,2],1)
df_diff1 <- diff(complete_df[,1],1)
plot.ts(df_diff1, main = "Time Series 1")
plot.ts(df_diff2, main = "Time Series 1")
df_diff1 <- diff(complete_df[,2])
df_diff1 <- diff(complete_df[,1])
plot.ts(df_diff1, main = "Time Series 1")
plot.ts(df_diff2, main = "Time Series 1")
df_diff1 <- diff(complete_df[,2],1)
df_diff2 <- diff(complete_df[,1],1)
plot.ts(df_diff1, main = "Time Series 1", )
plot.ts(df_diff2, main = "Time Series 1")
df_diff1 <- diff(complete_df[,2],1)
df_diff2 <- diff(complete_df[,1],1)
plot.ts(df_diff1, main = "Time Series 1", )
plot.ts(df_diff2, main = "Time Series 2")
plot.ts(complete_df[,6])
# your code here
acf(complete_df[,6], type = "covariance", main = "Autocovariance Plot of Random Walk")
library(datasets)
library(forecast)
library(astsa)
# run these lines if you do not have devtools or tsdl installed.
# install.packages("devtools")
# devtools::install_github("FinYang/tsdl")
library(tsdl)
complete_df = read.csv("./data.csv")
complete_df = complete_df[,-1]
set.seed(444)
plot.ts(complete_df[,2], main = "Time Series 1")
plot.ts(complete_df[,1], main = "Time Series 2")
plot.ts(complete_df[,5], main = "Time Series 3")
df_diff2 <- diff(complete_df[,1],1)
plot.ts(df_diff2, main = "Time Series 2")
df_diff <- diff(complete_df[,1],1)
plot.ts(df_diff2, main = "Time Series 2")
pacf(complete_df[,6], type = "covariance", main = "Autocovariance Plot of Random Walk")
plot.ts(complete_df[,6])
# your code here
acf(complete_df[,6], type = "covariance", main = "Autocovariance Plot of Random Walk")
pacf(complete_df[,6], type = "covariance", main = "Autocovariance Plot of Random Walk")
# your code here
acf2(complete_df[,6], type = "covariance", main = "Autocovariance Plot of Random Walk")
# your code here
acf2(complete_df[,6], type = "covariance")
# your code here
acf2(complete_df[,6])
plot.ts(complete_df[,6])
# your code here
acf2(complete_df[,6])
model = arima(complete_df[,6], order = c(2,0,0))
predict = forecast(model, h=12, level = 80)
autoplot(predict)
model
acf2 = (cpmplete_df[,7])
acf2 = (complete_df[,7])
plot.ts(complete_df[,7])
# your code here
acf2 = (complete_df[,7])
acf2 = (complete_df[,7])
plot.ts(complete_df[,7])
# your code here
acf2 = (complete_df[,7])
df7.a = arima(complete_df[,7], order = c(4,0,0))
predict = forecast(df7.a, h= 12, level = 80)
autoplot(predict)
model
plot.ts(complete_df[,9])
# your code here
acf2(complete_df[,9])
plot.ts(complete_df[,9])
# your code here
acf2(complete_df[,9])
model = arima(complete_df[,9], order = c(0,0,4))
predict = forecast(model, h = 12, level = 80)
autoplot(predict)
model
plot.ts(complete_df[,11])
acf2(complete_df[,11])
model = arima(complete_df[,9], order = c(0,0,2))
predict = forecast(model, h = 12, level = 80)
autoplot(predict)
model
plot.ts(complete_df[,11])
acf2(complete_df[,11])
model = arima(complete_df[,9], order = c(0,0,2))
predict = forecast(model, h = 12, level = 80)
autoplot(predict)
model
# your code here
plot.ts(complete_df[,11])
acf2(complete_df[,11])
model = arima(complete_df[,11], order = c(0,0,2))
predict = forecast(model, h = 12, level = 80)
autoplot(predict)
model
# your code here
plot.ts(complete_df[,3])
# your code goes here
acf2(complete_df[,3])
plot.ts(complete_df[,3])
# your code goes here
acf2(complete_df[,3])
model1 <- arima(complete_df[,3], order = c(3,0,3))
predict1 <- forecast(model1, h = 12, level = 80)
model1
autoplot(predict1)
plot.ts(complete_df[,3])
# your code goes here
acf2(complete_df[,3])
model1 <- arima(complete_df[,3], order = c(2,0,1)) # qui usa for loop, che ci dÃ  questo risultato
predict1 <- forecast(model1, h = 12, level = 80)
model1
autoplot(predict1)
# your code goes here
acf2(complete_df[,5])
ts_data3 = list(tsdl[[481]], meta_tsdl[481,])
meta_tsdl[[481,2]]
# your code goes here
ts_data3
# your code goes here
plot.ts(ts_data3[1])
# your code goes here
plot.ts(ts_data3[[1]])
plot.ts(diff(ts_data3[[1]]))
ts_data3 = list(tsdl[[481]], meta_tsdl[481,])
meta_tsdl[[481,2]]
# your code goes here
plot.ts(ts_data3[[1]])
plot.ts(diff(ts_data3[[1]]))
df_1 = diff(ts_data3[[1]])
Box.test(dgf_1, type = 'Ljung-Box', lag = log(length(df_1)))
ts_data3 = list(tsdl[[481]], meta_tsdl[481,])
meta_tsdl[[481,2]]
# your code goes here
plot.ts(ts_data3[[1]])
plot.ts(diff(ts_data3[[1]]))
df_1 = diff(ts_data3[[1]])
Box.test(df_1, type = 'Ljung-Box', lag = log(length(df_1)))
acf2(df_1)
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
library(forecast)
library(astsa)
# install.packages("devtools")
# devtools::install_github("FinYang/tsdl")
library(tsdl)
set.seed(444)
lunch_prices = rnorm(100, -10, 5)
starting_bank_account = 400
bank_account_balance = c(starting_bank_account)
for (i in 2:100) {
# x_i = x_{i - 1} + z_i
bank_account_balance[i] = bank_account_balance[i-1] + lunch_prices[i-1]
}
bank_account.ts = ts(bank_account_balance)
plot.ts(bank_account.ts, main = "Time Series of Lunch Spending", ylab = "Bank Account Balance", xlab = "Days")
plot.ts(jj, main = "Johnson and Johnson Quarterly Earnings Per Share", ylab = "Price, USD", xlab="Year")
windspeed.ts = ts(airquality[,'Wind'])
plot.ts(windspeed.ts, main = "Wind Speed in New York, Daily Measurement May to July 1973", ylab='Knots', xlab = "Days")
wn = rnorm(1000)
wn.ts = ts(wn)
plot.ts(wn.ts, main="White Noise Time Series")
z = rnorm(1000)
rw = c(0)
for (i in 2:1000) {
rw[i] = rw[i-1] + z[i]
}
rw.ts = ts(rw)
plot.ts(rw.ts, main="Random Walk Time Series")
w = rnorm(1000)
w2 = rnorm(1000)
w3 = rnorm(1000)
w4 = rnorm(1000)
plot.ts(w, main = "Four White Noises", ylab = "Position")
lines(w2, col='red')
lines(w3, col='green')
lines(w4, col='blue')
rw2 = c(0)
rw3 = c(0)
rw4 = c(0)
for (i in 2:1000) {
rw[i] = rw[i-1] + w[i]
rw2[i] = rw2[i-1] + w2[i]
rw3[i] = rw3[i-1] + w3[i]
rw4[i] = rw4[i-1] + w4[i]
}
plot.ts(rw, ylim=c(-15,60), main = "Four Random Walks", ylab = "Position")
lines(rw2, col='red')
lines(rw3, col='green')
lines(rw4, col='blue')
rw.ts = ts(rw)
acf(rw.ts, type = "covariance", main = "Autocovariance Plot of Random Walk")
acf(w, type="covariance", main = "Autocovariance Plot of White Noise")
acf(rw.ts, type = "correlation", main = "Autocorrelation Plot of Random Walk")
acf(w, type = "correlation", main = "Autocorrelation Plot of White Noise")
library(datasets)
library(forecast)
library(astsa)
library(tsdl)
df = read_feather("C:\Users\Francesco\Desktop\NYCDSA\CitiBike\Francesco\agno.feather")
df = read_feather("C:\\Users\\Francesco\\Desktop\\NYCDSA\\CitiBike\\Francesco\\agno.feather")
setwd("C:/Users/Francesco/Desktop/NYCDSA/CitiBike/Francesco")
df = read_feather(agno.feather, as_data_frame = TRUE)
install.packages("feather")
library(feather)
df = read_feather(agno.feather, as_data_frame = TRUE)
df <- read_feather(agno.feather)
df <- read_feather(agno)
df <- read_feather(agno.feather)
df <- read_feather(agno)
df <- read_feather("C:\Users\Francesco\Desktop\NYCDSA\CitiBike\Francesco\agno.feather")
df <- read_feather("C:\\Users\\Francesco\\Desktop\\NYCDSA\\CitiBike\\Francesco\\agno.feather")
df <- read_feather("C:\\Users\\Francesco\\Desktop\\NYCDSA\\CitiBike\\Francesco\\agno.feather", columns = NULL)
df <- read_feather("C:\\Users\\Francesco\\Desktop\\NYCDSA\\CitiBike\\Francesco\\agno.feather", columns = NULL)
library(feather)
df <- read_feather("C:\\Users\\Francesco\\Desktop\\NYCDSA\\CitiBike\\Francesco\\agno.feather", columns = NULL)
df <- read_feather("agno.feather", columns = NULL)
df <- arrow::read_feather("C:\\Users\\Francesco\\Desktop\\NYCDSA\\CitiBike\\Francesco\\agno.feather")
install.packages("arrow")
library(arrow)
df <- arrow::read_feather("C:\\Users\\Francesco\\Desktop\\NYCDSA\\CitiBike\\Francesco\\agno.feather")
df.year
install.packages("arrow")
df <- arrow::read_feather("C:\\Users\\Francesco\\Desktop\\NYCDSA\\CitiBike\\Francesco\\agno.feather")
View(df)
View(df)
View(df)
View(df)
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
library(forecast)
library(astsa)
# run these lines if you do not have devtools or tsdl installed.
# install.packages("devtools")
# devtools::install_github("FinYang/tsdl")
library(tsdl)
complete_df = read.csv("./data.csv")
complete_df = complete_df[,-1]
set.seed(444)
View(complete_df)
str(df)
boulder_daily_precip %>%
ggplot(aes(x = year)) +
geom_bar(color = "darkorchid4") +
labs(title = "Precipitation - Boulder, Colorado",
subtitle = "The data frame is sent to the plot using pipes",
y = "Daily precipitation (inches)",
x = "Date") + theme_bw(base_size = 15)
library(tidyverse)
df %>%
ggplot(aes(x = year)) +
geom_bar(color = "darkorchid4") +
labs(title = "Precipitation - Boulder, Colorado",
subtitle = "The data frame is sent to the plot using pipes",
y = "Daily precipitation (inches)",
x = "Date") + theme_bw(base_size = 15)
df %>%
ggplot(aes(x = month)) +
geom_bar(color = "darkorchid4") +
labs(title = "Precipitation - Boulder, Colorado",
subtitle = "The data frame is sent to the plot using pipes",
y = "Daily precipitation (inches)",
x = "Date") + theme_bw(base_size = 15)
df %>%
ggplot(aes(x = month)) +
geom_bar(color = "darkorchid4") +
labs(title = "Precipitation - Boulder, Colorado",
subtitle = "The data frame is sent to the plot using pipes",
y = "Daily precipitation (inches)",
x = "Date")
# plot the most used start_station
freq_start <- df %>%
group_by(start_name) %>%
summarise(count = n()) %>%
top_n(n = 15, wt = count)
View(freq_start)
ggplot(freq_start, aes(x = FINAL_CALL, y = count)) +
geom_col()
ggplot(freq_start, aes(x = start_name, y = count)) +
geom_col()
ggplot(freq_start, aes(x = start_name, y = count)) +
geom_col() +
coord_flip()
ggplot(freq_start, aes(x = reorder(start_name, -count), y = count)) +
geom_col() +
coord_flip()
ggplot(freq_start, aes(x = reorder(start_name, count), y = count)) +
geom_col() +
coord_flip()
ggplot(freq_start, aes(x = reorder(start_name, count), y = count, color=qsec)) +
geom_col() +
coord_flip()
ggplot(freq_start, aes(x = reorder(start_name, count), y = count)) +
geom_col() +
coord_flip() +
scale_color_gradient(low="blue", high="red")
# plot the most used start_station
freq_start <- df %>%
group_by(start_name, end_name) %>%
summarise(count = n()) %>%
top_n(n = 15, wt = count)
ggplot(freq_start, aes(x = reorder(start_name, count), y = count)) +
geom_col() +
coord_flip() +
facet(~end_name, scales = "free")
# plot the most used start_station
freq_start <- df %>%
group_by(start_name, end_name, year) %>%
summarise(count = n()) %>%
top_n(n = 15, wt = count)
View(freq_start)
# plot the most used start_station
freq_start <- df %>%
group_by(start_name, end_name, year) %>%
summarise(count = n()) %>%
top_n(n = 15, wt = count) %>%
arrange(desc(count))
View(freq_start)
# plot the most used start_station
freq_start <- df %>%
group_by(start_name, end_name, year) %>%
summarise(count = n()) %>%
top_n(n = 15, wt = count) %>%
arrange(desc(count, year))
View(freq_start)
# plot the most used start_station
freq_start <- df %>%
group_by(start_name, end_name) %>%
summarise(count = n()) %>%
top_n(n = 15, wt = count) %>%
arrange(desc(count))
View(freq_start)
