group_by(start_name, end_name, year) %>%
summarise(count = n()) %>%
top_n(n = 15, wt = count) %>%
arrange(desc(count))
View(freq_start)
# plot the most used start_station
freq_start <- df %>%
group_by(start_name, end_name, year) %>%
summarise(count = n()) %>%
top_n(n = 15, wt = count) %>%
arrange(desc(count, year))
View(freq_start)
# plot the most used start_station
freq_start <- df %>%
group_by(start_name, end_name) %>%
summarise(count = n()) %>%
top_n(n = 15, wt = count) %>%
arrange(desc(count))
View(freq_start)
library(forecast)
library(astsa)
library(tsdl)
library(arrow)
library(tidyverse)
library(ggpubr)
library(TSstudio)
library(timetk)
library(lubridate)
library(fUnitRoots)
library(ggforce)
df <- arrow::read_feather("C:\\Users\\Francesco\\Desktop\\NYCDSA\\CitiBike\\Francesco\\agno.feather")
df2 <- arrow::read_feather("C:\\Users\\Francesco\\Desktop\\NYCDSA\\CitiBike\\Francesco\\test_df.feather")
# new approach
df_new <- df[,1]
df2_new <- df2[,1]
df_new <- rbind(df_new, df2_new)
df_start <- mutate(df_new,
Yearweek = paste(year(start_time),
formatC(month(start_time),
width = 2,
flag = "0"),
formatC(week(start_time),
width = 2,
flag = "0")))
Temps_week <- df_start %>% group_by(Yearweek) %>% summarise(count = n())
Temps_week <- Temps_week[-1,]
ts_week <- ts(Temps_week$count, frequency=52, start = 2018)
plot(ts_week,
main = "Time Series of weekly rides per week",
xlab = "Year",
ylab = "Rides")
ts_week <- ts(Temps_week$count, frequency=52, start = c(2018))
plot(ts_week,
main = "Time Series of weekly rides per week",
xlab = "Year",
ylab = "Rides")
ts_week <- ts(Temps_week$count, frequency=52)
plot(ts_week,
main = "Time Series of weekly rides per week",
xlab = "Year",
ylab = "Rides")
View(Temps_week)
train <- ts(Temps_week[1:251,]$count, frequency=52)
test <- ts(Temps_week[252:261,]$count, frequency=52)
# Create new model
model_s <- auto.arima(train)
model_s
autoplot(fc_s)+
autolayer(test, series="Test Data")
fc_s <- forecast(model_s, level=c(40), h=10*12)
autoplot(fc_s)+
autolayer(test, series="Test Data")
# Create new model
model_s <- auto.sarima(train)
test <- ts(Temps_week[252:261,]$count, frequency=52, start = end(train))
# Plot new model
fc_s <- forecast(model_s, level=c(40), h=10*12)
autoplot(fc_s)+
autolayer(test, series="Test Data")
ndiffs(myts)
autoplot(fc_s) +
autolayer(test, series="Test Data") +
facet_zoom(xlim = c(5.8,6.2))
train <- ts(Temps_week[1:200,]$count, frequency=52)
test <- ts(Temps_week[201:261,]$count, frequency=52, start = end(train))
# Create new model
model_s <- auto.sarima(train)
# Create new model
model_s <- auto.arima(train)
model_s
# Plot new model
fc_s <- forecast(model_s, level=c(40), h=10*12)
autoplot(fc_s) +
autolayer(test, series="Test Data") +
facet_zoom(xlim = c(5.8,6.2))
autoplot(fc_s) +
autolayer(test, series="Test Data") +
facet_zoom(xlim = c(4.8,5))
# subsetting df to have start stations and timing
df_start <- df[,c(1,13,7,15,12)]
# Create different columns for different time configurations
# Month
df_start <- mutate(df_start,
MonthYear = paste(year(start_time),
formatC(month(start_time),
width = 2,
flag = "0")))
# Day of the week
df_start <- mutate(df_start,
Yearday = paste(year(start_time),
formatC(month(start_time),
width = 2,
flag = "0"),
formatC(day(start_time),
width = 2,
flag = "0")))
# Hour of the day
df_start <- mutate(df_start,
Dayhour = paste(year(start_time),
formatC(month(start_time),
width = 2,
flag = "0"),
formatC(day(start_time),
width = 2,
flag = "0"),
formatC(hour(start_time),
width = 2,
flag = "0")))
# Week of the year
df_start <- mutate(df_start, Week = week(start_time))
# Year
df_start <- mutate(df_start, Year = year(start_time))
df_start$Year <- as.factor(df_start$Year)
# eliminate year 2017
df_start <- subset(df_start, Year != 2017)
# Grou_by year
Temps_year <- df_start %>% group_by(Year) %>% summarise(count = n())
# TS year
myts <- ts(Temps_year$count, frequency=1, start = c(2018))
plot(myts,
main = "Time Series of bike rides per year",
xlab = "Year",
ylab = "Rides")
# group_by Montyear
Temps_month <- df_start %>% group_by(MonthYear) %>% summarise(count = n())
# Ts month
myts <- ts(Temps_month$count, frequency=12, start = c(2018))
plot(myts,
main = "Time Series of bike rides per month",
xlab = "Year",
ylab = "Rides")
# Decompose monthly TS
myds_month <- decompose(myts)
View(df)
View(df2)
View(df_start)
# subsetting df to have start stations and timing
df_start <- df[,c(1,13,7,15,12)]
df2_start <- df2[,c(1,6,11,)]
df2_start <- df2[,c(1,6,11)]
View(df2_start)
# subsetting df to have start stations and timing
df_start <- df[,c(1,13,7)]
df2_start <- df2[,c(1,4,12)]
# merging the two dataframes
df_start <- rbind(df_start, df2_start)
# merging the two dataframes
df_new <- rbind(df_start, df2_start)
View(df_start)
View(df2_start)
colnames(df2_start)[2] <- "start_name"
# merging the two dataframes
df_start <- rbind(df_start, df2_start)
View(df_start)
# Create different columns for different time configurations
# Month
df_start <- mutate(df_start,
MonthYear = paste(year(start_time),
formatC(month(start_time),
width = 2,
flag = "0")))
# Day of the week
df_start <- mutate(df_start,
Yearday = paste(year(start_time),
formatC(month(start_time),
width = 2,
flag = "0"),
formatC(day(start_time),
width = 2,
flag = "0")))
# Hour of the day
df_start <- mutate(df_start,
Dayhour = paste(year(start_time),
formatC(month(start_time),
width = 2,
flag = "0"),
formatC(day(start_time),
width = 2,
flag = "0"),
formatC(hour(start_time),
width = 2,
flag = "0")))
# Week of the year
df_start <- mutate(df_start, Week = week(start_time))
# Year
df_start <- mutate(df_start, Year = year(start_time))
df_start$Year <- as.factor(df_start$Year)
# eliminate year 2017
df_start <- subset(df_start, Year != 2017)
# Grou_by year
Temps_year <- df_start %>% group_by(Year) %>% summarise(count = n())
# TS year
myts <- ts(Temps_year$count, frequency=1, start = c(2018))
plot(myts,
main = "Time Series of bike rides per year",
xlab = "Year",
ylab = "Rides")
# group_by Montyear
Temps_month <- df_start %>% group_by(MonthYear) %>% summarise(count = n())
# Ts month
myts <- ts(Temps_month$count, frequency=12, start = c(2018))
plot(myts,
main = "Time Series of bike rides per month",
xlab = "Year",
ylab = "Rides")
# Decompose monthly TS
myds_month <- decompose(myts)
plot(myds_month)
# group_by Yearday
Temps_day <- df_start %>% group_by(Yearday) %>% summarise(count = n())
# Ts day
myts <- ts(Temps_day$count, frequency=365, start = c(2018))
plot(myts,
main = "Time Series of daily bike rides",
xlab = "Year",
ylab = "Rides")
#Decompose daily TS
myts_day <- decompose(myts)
plot(myts_day)
# Unit root test
urkpssTest(myts, type = c("tau"), lags = c("short"),use.lag = NULL, doplot = TRUE)
ndiffs(myts) #1
# Magic function for Sarima
my_model <- auto.arima(myts)
my_model
#ARIMA(4,1,1)(0,1,0)[365]
plot.ts(my_model$residuals)
myforecast <- forecast(my_model, level=c(95), h=10*12)
plot(myforecast)
Box.test(my_model$resid, lag=5, type="Ljung-Box")
Box.test(my_model$resid, lag=10, type="Ljung-Box")
Box.test(my_model$resid, lag=15, type="Ljung-Box")
checkresiduals(myforecast)
Box.test(my_model$resid, lag=500, type="Ljung-Box")
accuracy(myforecast)
View(Temps_day)
# Splittin the data in train and test
train <- ts(Temps_day[1:1460,]$count, frequency=365)
test <- ts(Temps_day[1461:1519,]$count, frequency=365, start = end(train))
# Create new model
model_s <- auto.arima(train)
model_s
# Plot new model
fc_s <- forecast(model_s, level=c(40), h=10*12)
autoplot(fc_s)+
autolayer(test, series="Test Data")
autoplot(fc_s)+
autolayer(test, series="Test Data")  +
facet_zoom(xlim = c(4.9,5.4))
checkresiduals(fc_s)
accuracy(fc_s)
Box.test(fc_s$resid, lag=5, type="Ljung-Box")
Box.test(fc_s$resid, lag=10, type="Ljung-Box")
Box.test(fc_s$resid, lag=15, type="Ljung-Box")
Box.test(fc_s$resid, lag=500, type="Ljung-Box")
accuracy(fc_s)
# Trying window again
train
window(train, start = 2020.2, end = 2020.6)
window(train, start = c(2020,2), end = c(2020,6))
window(train, start = c(2020,2), end = c(2020,6))
window(Temps_day, start = as.Date("2020-03-01"), end = as.Date("2020-06-01"))
win <- window(train, start = as.Date("2020-03-01"), end = as.Date("2020-06-01"))
win <- window(train, start = as.Date("2020/03/01"), end = as.Date("2020/06/01"))
autoplot(fc_s)+
autolayer(test, series="Test Data")  +
facet_zoom(xlim = c(4.9,5.2))
# Ts month
myts <- ts(Temps_month$count, frequency=12, start = c(2018))
plot(myts,
main = "Time Series of bike rides per month",
xlab = "Year",
ylab = "Rides")
# Decompose monthly TS
myds_month <- decompose(myts)
plot(myds_month)
# TS year
myts <- ts(Temps_year$count, frequency=1, start = c(2018))
plot(myts,
main = "Time Series of bike rides per year",
xlab = "Year",
ylab = "Rides")
# Ts month
myts <- ts(Temps_month$count, frequency=12, start = c(2018))
plot(myts,
main = "Time Series of bike rides per month",
xlab = "Year",
ylab = "Rides")
plot(myts,
y = Temps_month$count/100,
main = "Time Series of bike rides per month",
xlab = "Year",
ylab = "Rides")
plot(myts,
main = "Time Series of bike rides per month",
xlab = "Year",
ylab = "Rides")
plot(myts,
main = "Time Series of bike rides per month",
xlab = "Year",
ylab = "Rides")
axis(2,at=marks,labels=marks)
options(scipen=999)
plot(myts,
main = "Time Series of bike rides per month",
xlab = "Year",
ylab = "Rides")
# Decompose monthly TS
myds_month <- decompose(myts)
options(scipen=999)
plot(myds_month)
options(scipen=999)
plot(myds_month,
main = "Decomposed monthly Time Series")
myts <- ts(Temps_day$count, frequency=365, start = c(2018))
options(scipen=999)
plot(myts,
main = "Time Series of daily bike rides",
xlab = "Year",
ylab = "Rides")
myts_day <- decompose(myts)
options(scipen=999)
plot(myts_day)
# Unit root test
urkpssTest(myts, type = c("tau"), lags = c("short"),use.lag = NULL, doplot = TRUE)
# Magic function for Sarima
my_model <- auto.arima(myts)
my_model
# Splittin the data in train and test
train <- ts(Temps_day[1:1460,]$count, frequency=365)
test <- ts(Temps_day[1461:1519,]$count, frequency=365, start = end(train))
# Create new model
model_s <- auto.arima(train)
model_s
options(scipen=999)
autoplot(fc_s)+
autolayer(test, series="Test Data")  +
facet_zoom(xlim = c(4.9,5.2))
checkresiduals(fc_s)
accuracy(fc_s)
Box.test(fc_s$resid, lag=5, type="Ljung-Box")
Box.test(fc_s$resid, lag=10, type="Ljung-Box")
Box.test(fc_s$resid, lag=15, type="Ljung-Box")
Box.test(fc_s$resid, lag=500, type="Ljung-Box")
Box.test(fc_s$resid, lag=6, type="Ljung-Box")
Box.test(fc_s$resid, lag=7, type="Ljung-Box")
View(Temps_week)
Temps_week <- df %>%
group_by(year = year(date), week = week(date)) %>%
summarise_if(is.numeric, sum)
View(df_start)
Temps_week <- df_start %>%
group_by(year = year(start_time), week = week(start_time)) %>%
summarise_if(is.numeric, sum)
View(Temps_week)
Temps_week <- df_start %>%
group_by(year = year(start_time), week = week(start_time)) %>%
summarise(count = n())
myts <- ts(Temps_week$count, start = c(2018))
options(scipen=999)
plot(myts,
main = "Time Series of daily bike rides",
xlab = "Year",
ylab = "Rides")
myts <- ts(Temps_week$count, frequency = 52, start = c(2018))
options(scipen=999)
plot(myts,
main = "Time Series of daily bike rides",
xlab = "Year",
ylab = "Rides")
myts_week <- decompose(myts)
options(scipen=999)
plot(myts_day)
options(scipen=999)
plot(myts_week)
train <- ts(Temps_week[1:212,]$count, frequency=52)
test <- ts(Temps_week[213:221,]$count, frequency=52, start = end(train))
# Create new model
model_w <- auto.arima(train)
model_w
options(scipen=999)
autoplot(fc_w)+
autolayer(test, series="Test Data")
fc_w <- forecast(model_w, level=c(40), h=10*12)
autoplot(fc_w)+
autolayer(test, series="Test Data")
# Plot new model
fc_w <- forecast(model_w, level=c(40), h=10*2)
options(scipen=999)
autoplot(fc_w)+
autolayer(test, series="Test Data")
autoplot(fc_w)+
autolayer(test, series="Test Data")  +
facet_zoom(xlim = c(5.1,5.4))
autoplot(fc_w)+
autolayer(test, series="Test Data")  +
facet_zoom(xlim = c(5,5.4))
#Splittin the data in train and test
train <- ts(Temps_week[1:211,]$count, frequency=52)
test <- ts(Temps_week[211:221,]$count, frequency=52, start = end(train))
# Create new model
model_w <- auto.arima(train)
model_w
# Plot new model
fc_w <- forecast(model_w, level=c(40), h=10*2)
options(scipen=999)
autoplot(fc_w)+
autolayer(test, series="Test Data")  +
facet_zoom(xlim = c(5,5.4))
#Splittin the data in train and test
train <- ts(Temps_week[1:200,]$count, frequency=52)
test <- ts(Temps_week[201:221,]$count, frequency=52, start = end(train))
# Create new model
model_w <- auto.arima(train)
model_w
# Plot new model
fc_w <- forecast(model_w, level=c(40), h=10*2)
options(scipen=999)
autoplot(fc_w)+
autolayer(test, series="Test Data")  +
facet_zoom(xlim = c(5,5.4))
autoplot(fc_w)+
autolayer(test, series="Test Data")  +
facet_zoom(xlim = c(4.7,4.9))
autoplot(fc_w)+
autolayer(test, series="Test Data")  +
facet_zoom(xlim = c(4.7,5))
#Splittin the data in train and test
train <- ts(Temps_week[1:200,]$count, frequency=52)
test <- ts(Temps_week[200:221,]$count, frequency=52, start = end(train))
# Create new model
model_w <- auto.arima(train)
model_w
# Plot new model
fc_w <- forecast(model_w, level=c(40), h=10*2)
options(scipen=999)
autoplot(fc_w)+
autolayer(test, series="Test Data")  +
facet_zoom(xlim = c(4.7,5))
#Splittin the data in train and test
train <- ts(Temps_week[1:199,]$count, frequency=52)
test <- ts(Temps_week[200:221,]$count, frequency=52, start = end(train))
# Create new model
model_w <- auto.arima(train)
model_w
# Plot new model
fc_w <- forecast(model_w, level=c(40), h=10*2)
options(scipen=999)
autoplot(fc_w)+
autolayer(test, series="Test Data")  +
facet_zoom(xlim = c(4.7,5))
#Splittin the data in train and test
train <- ts(Temps_week[1:200,]$count, frequency=52)
test <- ts(Temps_week[200:221,]$count, frequency=52, start = end(train))
# Create new model
model_w <- auto.arima(train)
model_w
# Plot new model
fc_w <- forecast(model_w, level=c(40), h=10*2)
options(scipen=999)
autoplot(fc_w)+
autolayer(test, series="Test Data")  +
facet_zoom(xlim = c(4.7,5))
autoplot(fc_w)+
autolayer(test, series="Test Data")  +
facet_zoom(xlim = c(4.8,5.1))
checkresiduals(fc_w)
accuracy(fc_w)
Box.test(fc_w$resid, lag=5, type="Ljung-Box")
Box.test(fc_w$resid, lag=10, type="Ljung-Box")
Box.test(fc_w$resid, lag=15, type="Ljung-Box")
Box.test(fc_w$resid, lag=500, type="Ljung-Box")
Box.test(fc_w$resid, lag=20, type="Ljung-Box")
Box.test(fc_w$resid, lag=30, type="Ljung-Box")
autoplot(fc_w)+
autolayer(test, series="Test Data")  +
facet_zoom(xlim = c(4.8,5.3))
myts <- ts(Temps_week$count, frequency = 52, start = c(2018))
options(scipen=999)
plot(myts,
main = "Time Series of weekly bike rides",
xlab = "Year",
ylab = "Rides")
Box.test(fc_w$resid, lag=40, type="Ljung-Box")
Box.test(fc_w$resid, lag=15, type="Ljung-Box")
Box.test(fc_s$resid, lag=5, type="Ljung-Box")
Box.test(fc_s$resid, lag=10, type="Ljung-Box")
Box.test(fc_s$resid, lag=15, type="Ljung-Box")
Box.test(fc_s$resid, lag=11, type="Ljung-Box")
Box.test(fc_s$resid, lag=12, type="Ljung-Box")
Box.test(fc_s$resid, lag=14, type="Ljung-Box")
Box.test(fc_s$resid, lag=15, type="Ljung-Box")
